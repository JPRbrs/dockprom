networks:
  docker_internal:
    driver: bridge
    name: docker_internal

volumes:
    prometheus_data: {}
    # grafana_data: {}
    # influxdb-data: {}

services:
  # Influx 2 is not supported in 32 bit OS
  # influxdb:
  #   image: influxdb:2.7.5  # ARM64 supported
  #   ports:
  #     - 8086:8086
  #   volumes:
  #     - influxdb-data:/media/usb/influxdb2
  #   environment:
  #     - INFLUXDB_DB=metrics
  #     - INFLUXDB_ADMIN_USER=admin
  #     - INFLUXDB_ADMIN_PASSWORD=adminpass
  #     - INFLUXDB_BUCKET=prometheus_metrics
  #     - INFLUXDB_TOKEN=mysecrettoken
  #     - INFLUXDB_ORG=my-org

  # telegraf:
  #   image: arm64v8/telegraf:1.30-alpine  # Official ARM64 Alpine build
  #   ports:
  #     - 9201:9201
  #   volumes:
  #     - ./telegraf.conf:/etc/telegraf/telegraf.conf:ro
  #   depends_on:
  #     - influxdb

  prometheus:
    image: prom/prometheus:v2.55.0
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - docker_internal
    # labels:
    #   org.label-schema.group: "monitoring"
    # depends_on:
    #   - telegraf

  alertmanager:
    image: prom/alertmanager:v0.28.0
    container_name: alertmanager
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    ports:
      - 9093:9093
    networks:
      - docker_internal
  #   labels:
  #     org.label-schema.group: "monitoring"

  nodeexporter:
    image: prom/node-exporter:v1.8.2
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    network_mode: host
    # labels:
    #   org.label-schema.group: "monitoring"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.51.0
    container_name: cadvisor
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    ports:
      - 8080:8080
    restart: unless-stopped
    networks:
      - docker_internal
    # labels:
    #   org.label-schema.group: "monitoring"

  # grafana:
  #   image: grafana/grafana:11.3.0
  #   container_name: grafana
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #     - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
  #     - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
  #     - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
  #     - GF_USERS_ALLOW_SIGN_UP=false
  #   restart: unless-stopped
  #   networks:
  #     - docker_internal
  #   labels:
  #     org.label-schema.group: "monitoring"

  caddy:
    image: caddy:2.8.4
    container_name: caddy
    ports:
      - "80:80"
      - "443:443"
    networks:
      - docker_internal    
    volumes:
      - ./caddy:/etc/caddy
    environment:
      - ADMIN_USER=${ADMIN_USER:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - ADMIN_PASSWORD_HASH=${ADMIN_PASSWORD_HASH:-$2a$14$1l.IozJx7xQRVmlkEQ32OeEEfP5mRxTpbDTCTcXRqn19gXD8YK1pO}
    restart: unless-stopped
    # labels:
    #   org.label-schema.group: "monitoring"
